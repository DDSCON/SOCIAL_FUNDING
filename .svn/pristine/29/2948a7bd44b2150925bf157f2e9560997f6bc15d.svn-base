package a2team.yang.jae.account.controller;

import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import a2team.yang.jae.account.service.AccountService;
import a2team.yang.jae.action.service.PaymentService;
import a2team.yang.jae.project.service.ProjectService;


/**
 * Handles requests for the application home page.
 */
/*@RequestMapping(value = "/view")*/
@Controller
public class AccountController {

	private static final Logger logger = LoggerFactory
			.getLogger(AccountController.class);

	@Autowired
	private AccountService accountService;
	
	@Autowired
	private PaymentService paymentService;
	
	@Autowired
	private ProjectService projectService;


	/**
	 * Simply selects the home view to render by returning its name.
	 */

	@RequestMapping(value = "/ourProjectView", method = RequestMethod.GET)
	public String ourProjectView(Locale locale, Model model, @RequestParam Map map, HttpSession session) {
		logger.info("Welcome payment test! The client locale is {}.", locale);
		
		if(session.getAttribute("email") == null) {
			return "redirect:/";
		}
		
		map.put("m_seq", session.getAttribute("seq"));
		
		List ourProjectView = accountService.getOurProjectView(map);
		List ourProjectView1 = accountService.getOurProjectView1(map);
		List ourProjectView2 = accountService.getOurProjectView2(map);
		
		model.addAttribute("ourProjectView", ourProjectView);
		model.addAttribute("ourProjectView1", ourProjectView1);
		model.addAttribute("ourProjectView2", ourProjectView2);
		
		return "/account/ourProjectView";
	}

	
	@RequestMapping(value = "/account/profile1", method = RequestMethod.GET)
	public String profile1(Locale locale, Model model, @RequestParam Map map, HttpSession session) {
		logger.info("Welcome payment test! The client locale is {}.", locale);
		if( session.getAttribute("email") == null){
			
			return "redirect:/";
			
		} else {
			
			map.put("email", session.getAttribute("email"));
			List getAllmember = accountService.getAllMember(map);
			model.addAttribute("getAllmember", ((Map)getAllmember.get(0)).get("seq").toString());
			
			List getMemberDetail = accountService.getMemberDetail(map);
			model.addAttribute("getMemberDetail", getMemberDetail);
			
			return "/member/profile1";
			
		}
		
	}

	@RequestMapping(value = "/account/updatamember_detail", method = RequestMethod.POST)
	public String updatamember_detail(Locale locale, Model model, @RequestParam Map map) {
		logger.info("Welcome payment test! The client locale is {}.", locale);
		 int updata = accountService.updataMember_detail(map);
		
		return "/account/ourProjectView";
	}
	
	@RequestMapping(value = "/account/profile2", method = {RequestMethod.GET, RequestMethod.POST})
	public String profile2(Locale locale, Model model, @RequestParam Map map, HttpSession session) {
		logger.info("Welcome payment test! The client locale is {}.", locale);
		if( session.getAttribute("email") == null){
			
			return "redirect:/";
			
		} else {
			
			map.put("email", session.getAttribute("email"));
			List getAllmember = accountService.getAllMember(map);
			model.addAttribute("getAllmember", ((Map)getAllmember.get(0)).get("seq").toString());
			
			List payinfo = accountService.getPayInfo(map);
			model.addAttribute("payinfo", payinfo);
			
			return "/member/profile2";
			
		}
		
	}
	@RequestMapping(value = "/account/updata_card_payinfo", method = RequestMethod.POST)
	public String updata_card_payinfo(Locale locale, Model model, @RequestParam Map map) {
		logger.info("Welcome payment test! The client locale is {}.", locale);
		 int updata1 = accountService.updata_card_payinfo(map);
		
		return "/account/ourProjectView";
	}
	
	
	
	
	@RequestMapping(value = "/account/myProjectView", method = RequestMethod.GET)
	public String myProjectView(Locale locale, Model model, @RequestParam Map map, HttpSession session) {
		logger.info("Welcome MemberTest! The client locale is {}.", locale);

	    if(session.getAttribute("email")==null)   {
		     
	    	return "redirect:/";
	   } else {
	    
		map.put("email", session.getAttribute("email"));
		map.put("m_seq", session.getAttribute("seq"));
		map.put("p_seq", session.getAttribute("p_seq"));
		map.put("seq", session.getAttribute("p_seq"));
		
		List poption = projectService.getAllOption(map);
		model.addAttribute("poption", poption);

		List mains = projectService.getAllMain(map);
		model.addAttribute("mains", mains);

		List projectview = accountService.getProjectView(map);
		model.addAttribute("projectview", projectview);   
		
		List contributer = accountService.getContributer(map);
		model.addAttribute("contributer", contributer);   
		   

		return "/account/myProjectView";
		}
		
	}
	

	
/*	@RequestMapping(value = "/action/paymentStep2", method = RequestMethod.GET)
	public String paymentStep2(Locale locale, Model model, @RequestParam Map map, HttpSession session) {
		logger.info("Welcome payment test! The client locale is {}.", locale);


			
		
		List payinfo = paymentService.getPayInfo(map);
		model.addAttribute("payinfo", payinfo);
		
		List poption = projectService.getAllOption(map);
		model.addAttribute("poption", poption);

		List mains = projectService.getAllMain(map);
		model.addAttribute("mains", mains);


		return "/action/paymentStep2";

		
		
	}
	
	@RequestMapping(value = "/action/paypal", method = RequestMethod.POST)
	public String paypal(Locale locale, Model model) {
		logger.info("Welcome payment test! The client locale is {}.", locale);

		return "/action/paymentStep3";
	}
	
	@RequestMapping(value = "/action/paymentStep3", method = RequestMethod.GET)
	public String paymentStep3(Locale locale, Model model, @RequestParam Map map) {
		logger.info("Welcome payment test! The client locale is {}.", locale);

		List poption = projectService.getAllOption(map);
		model.addAttribute("poption", poption);

		List mains = projectService.getAllMain(map);
		model.addAttribute("mains", mains);

		paymentService.insertPayment(map);
		
		
		return "/action/paymentStep3";
	}
*/


	/*@RequestMapping(value = "/insert", method = RequestMethod.POST)
	public String insert(Locale locale, Model model, @RequestParam Map map) {
		
		try {
			logger.info("Welcome MemberInsertTest! The client locale is {}.",
					locale);

			int count = memberService.testTransaction(map);
//			int count = memberService.insertMember(map);
			
			if (0 < count) {
				model.addAttribute("success_flag", "Y");
			} else {
				model.addAttribute("success_flag", "N");
			}
			model.addAttribute("forward_url", "/member/list");
			
		} catch (Exception e) {
			logger.info(e.getMessage());
			model.addAttribute("success_flag", "N");
			model.addAttribute("forward_url", "/member/list");
		} finally {
		}
		return "common/common_alert";
	}
	
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public String detail(Locale locale, Model model, @RequestParam Map map) {
		logger.info("Welcome MemberDetailTest! The client locale is {}.", locale);
		
		List members = memberService.getAllMember(map);

		model.addAttribute("member", members.get(0));
		
		return "member/member_detail";
	}
	
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(Locale locale, Model model, @RequestParam Map map) {
		try {
			logger.info("Welcome MemberUpdateTest! The client locale is {}.",
					locale);

			int count = memberService.updateMember(map);
			
			if (0 < count) {
				model.addAttribute("success_flag", "Y");
			} else {
				model.addAttribute("success_flag", "N");
			}
			model.addAttribute("forward_url", "/member/list");
			
		} catch (Exception e) {
			logger.info(e.getMessage());
			model.addAttribute("success_flag", "N");
			model.addAttribute("forward_url", "/member/list");
		} finally {
		}
		return "common/common_alert";
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public String delete(Locale locale, Model model, @RequestParam Map map) {
		try {
			logger.info("Welcome MemberUpdateTest! The client locale is {}.",
					locale);

			int count = memberService.deleteMember(map);
			
			if (0 < count) {
				model.addAttribute("success_flag", "Y");
			} else {
				model.addAttribute("success_flag", "N");
			}
			model.addAttribute("forward_url", "/member/list");
			
		} catch (Exception e) {
			logger.info(e.getMessage());
			model.addAttribute("success_flag", "N");
			model.addAttribute("forward_url", "/member/list");
		} finally {
		}
		return "common/common_alert";
	}*/

}
